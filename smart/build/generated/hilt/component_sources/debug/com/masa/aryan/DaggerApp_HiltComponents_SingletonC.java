// Generated by Dagger (https://dagger.dev).
package com.masa.aryan;

import android.app.Activity;
import android.app.Service;
import android.content.Context;
import android.content.SharedPreferences;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.fanap.corepos.di.ViewModelModule;
import com.fanap.corepos.di.ViewModelModule_ProvideTmsRepositoryFactory;
import com.fanap.corepos.tms.repository.TmsRepository;
import com.fanap.corepos.tms.viewmodel.TmsViewModel;
import com.fanap.corepos.tms.viewmodel.TmsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.masa.aryan.balance.BalanceFragment;
import com.masa.aryan.balance.BalanceFragment_MembersInjector;
import com.masa.aryan.balance.BalanceSuccessFragment;
import com.masa.aryan.balance.BalanceSuccessFragment_MembersInjector;
import com.masa.aryan.bill.BillDetailFragment;
import com.masa.aryan.bill.BillDetailFragment_MembersInjector;
import com.masa.aryan.bill.BillSuccessFragment;
import com.masa.aryan.bill.BillSuccessFragment_MembersInjector;
import com.masa.aryan.buy.BuyFragment;
import com.masa.aryan.buy.BuyFragment_MembersInjector;
import com.masa.aryan.buy.BuySuccessFragment;
import com.masa.aryan.buy.BuySuccessFragment_MembersInjector;
import com.masa.aryan.charge.ChargeFragment;
import com.masa.aryan.charge.ChargeFragment_MembersInjector;
import com.masa.aryan.charge.ChargeSuccessFragment;
import com.masa.aryan.charge.ChargeSuccessFragment_MembersInjector;
import com.masa.aryan.di.AppModule;
import com.masa.aryan.di.AppModule_ProvideApplicationContextFactory;
import com.masa.aryan.di.AppModule_ProvideLoadingFragmentFactory;
import com.masa.aryan.di.AppModule_ProvideSharedPreferencesFactory;
import com.masa.aryan.main.MainActivity;
import com.masa.aryan.main.MainActivity_MembersInjector;
import com.masa.aryan.main.view.FailFragment;
import com.masa.aryan.main.view.FailFragment_MembersInjector;
import com.masa.aryan.main.view.LoadingFragment;
import com.masa.aryan.main.view.SwipeFragment;
import com.masa.aryan.main.view.SwipeFragment_MembersInjector;
import com.masa.aryan.settings.PasswordFragment;
import com.masa.aryan.settings.PasswordFragment_MembersInjector;
import com.masa.aryan.settings.buyer.SettlementFragment;
import com.masa.aryan.settings.buyer.SettlementFragment_MembersInjector;
import com.masa.aryan.settings.management.ConnectivityFragment;
import com.masa.aryan.settings.management.ConnectivityFragment_MembersInjector;
import com.masa.aryan.settings.management.FirstReciptAndSecondReciptFragment;
import com.masa.aryan.settings.management.FirstReciptAndSecondReciptFragment_MembersInjector;
import com.masa.aryan.settings.management.GetInfoFragment;
import com.masa.aryan.settings.management.GetInfoFragment_MembersInjector;
import com.masa.aryan.settings.management.LogonFragment;
import com.masa.aryan.settings.management.LogonFragment_MembersInjector;
import com.masa.aryan.settings.management.ManagementFragment;
import com.masa.aryan.settings.management.ManagementFragment_MembersInjector;
import com.masa.aryan.settings.management.ReciptPrintSettingFragment;
import com.masa.aryan.settings.management.ReciptPrintSettingFragment_MembersInjector;
import com.masa.aryan.settings.management.TerminalFragment;
import com.masa.aryan.settings.shop.report.PrintReceiptFragment;
import com.masa.aryan.settings.shop.report.PrintReceiptFragment_MembersInjector;
import com.masa.aryan.settings.shop.report.SearchTransactionFragment;
import com.masa.aryan.settings.shop.report.SearchTransactionFragment_MembersInjector;
import com.masa.aryan.settings.shop.report.ShowReceiptFragment;
import com.masa.aryan.settings.shop.report.ShowReceiptFragment_MembersInjector;
import com.masa.aryan.settings.shop.report.TotalReportFragment;
import com.masa.aryan.settings.shop.report.TotalReportFragment_MembersInjector;
import com.masa.aryan.settings.shop.report.TransactionListFragment;
import com.masa.aryan.settings.shop.report.TransactionListFragment_MembersInjector;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApp_HiltComponents_SingletonC {
  private DaggerApp_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder appModule(AppModule appModule) {
      Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    public App_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new SingletonCImpl(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements App_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public App_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonCImpl);
    }
  }

  private static final class ActivityCBuilder implements App_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public App_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements App_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public App_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements App_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public App_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements App_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public App_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements App_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public App_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, new ViewModelModule(), savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements App_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public App_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends App_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends App_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectBalanceFragment(BalanceFragment balanceFragment) {
      injectBalanceFragment2(balanceFragment);
    }

    @Override
    public void injectBalanceSuccessFragment(BalanceSuccessFragment balanceSuccessFragment) {
      injectBalanceSuccessFragment2(balanceSuccessFragment);
    }

    @Override
    public void injectBillDetailFragment(BillDetailFragment billDetailFragment) {
      injectBillDetailFragment2(billDetailFragment);
    }

    @Override
    public void injectBillSuccessFragment(BillSuccessFragment billSuccessFragment) {
      injectBillSuccessFragment2(billSuccessFragment);
    }

    @Override
    public void injectBuyFragment(BuyFragment buyFragment) {
      injectBuyFragment2(buyFragment);
    }

    @Override
    public void injectBuySuccessFragment(BuySuccessFragment buySuccessFragment) {
      injectBuySuccessFragment2(buySuccessFragment);
    }

    @Override
    public void injectChargeFragment(ChargeFragment chargeFragment) {
      injectChargeFragment2(chargeFragment);
    }

    @Override
    public void injectChargeSuccessFragment(ChargeSuccessFragment chargeSuccessFragment) {
      injectChargeSuccessFragment2(chargeSuccessFragment);
    }

    @Override
    public void injectFailFragment(FailFragment failFragment) {
      injectFailFragment2(failFragment);
    }

    @Override
    public void injectSwipeFragment(SwipeFragment swipeFragment) {
      injectSwipeFragment2(swipeFragment);
    }

    @Override
    public void injectPasswordFragment(PasswordFragment passwordFragment) {
      injectPasswordFragment2(passwordFragment);
    }

    @Override
    public void injectSettlementFragment(SettlementFragment settlementFragment) {
      injectSettlementFragment2(settlementFragment);
    }

    @Override
    public void injectConnectivityFragment(ConnectivityFragment connectivityFragment) {
      injectConnectivityFragment2(connectivityFragment);
    }

    @Override
    public void injectFirstReciptAndSecondReciptFragment(
        FirstReciptAndSecondReciptFragment firstReciptAndSecondReciptFragment) {
      injectFirstReciptAndSecondReciptFragment2(firstReciptAndSecondReciptFragment);
    }

    @Override
    public void injectGetInfoFragment(GetInfoFragment getInfoFragment) {
      injectGetInfoFragment2(getInfoFragment);
    }

    @Override
    public void injectLogonFragment(LogonFragment logonFragment) {
      injectLogonFragment2(logonFragment);
    }

    @Override
    public void injectManagementFragment(ManagementFragment managementFragment) {
      injectManagementFragment2(managementFragment);
    }

    @Override
    public void injectReciptPrintSettingFragment(
        ReciptPrintSettingFragment reciptPrintSettingFragment) {
      injectReciptPrintSettingFragment2(reciptPrintSettingFragment);
    }

    @Override
    public void injectTerminalFragment(TerminalFragment terminalFragment) {
    }

    @Override
    public void injectPrintReceiptFragment(PrintReceiptFragment printReceiptFragment) {
      injectPrintReceiptFragment2(printReceiptFragment);
    }

    @Override
    public void injectSearchTransactionFragment(
        SearchTransactionFragment searchTransactionFragment) {
      injectSearchTransactionFragment2(searchTransactionFragment);
    }

    @Override
    public void injectShowReceiptFragment(ShowReceiptFragment showReceiptFragment) {
      injectShowReceiptFragment2(showReceiptFragment);
    }

    @Override
    public void injectTotalReportFragment(TotalReportFragment totalReportFragment) {
      injectTotalReportFragment2(totalReportFragment);
    }

    @Override
    public void injectTransactionListFragment(TransactionListFragment transactionListFragment) {
      injectTransactionListFragment2(transactionListFragment);
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }

    private BalanceFragment injectBalanceFragment2(BalanceFragment instance) {
      BalanceFragment_MembersInjector.injectAppContext(instance, singletonCImpl.provideApplicationContextProvider.get());
      BalanceFragment_MembersInjector.injectLoading(instance, singletonCImpl.provideLoadingFragmentProvider.get());
      return instance;
    }

    private BalanceSuccessFragment injectBalanceSuccessFragment2(BalanceSuccessFragment instance) {
      BalanceSuccessFragment_MembersInjector.injectAppContext(instance, singletonCImpl.provideApplicationContextProvider.get());
      return instance;
    }

    private BillDetailFragment injectBillDetailFragment2(BillDetailFragment instance) {
      BillDetailFragment_MembersInjector.injectAppContext(instance, singletonCImpl.provideApplicationContextProvider.get());
      BillDetailFragment_MembersInjector.injectLoading(instance, singletonCImpl.provideLoadingFragmentProvider.get());
      return instance;
    }

    private BillSuccessFragment injectBillSuccessFragment2(BillSuccessFragment instance) {
      BillSuccessFragment_MembersInjector.injectAppContext(instance, singletonCImpl.provideApplicationContextProvider.get());
      return instance;
    }

    private BuyFragment injectBuyFragment2(BuyFragment instance) {
      BuyFragment_MembersInjector.injectAppContext(instance, singletonCImpl.provideApplicationContextProvider.get());
      BuyFragment_MembersInjector.injectAppInfoAmount(instance, singletonCImpl.provideSharedPreferencesProvider.get());
      BuyFragment_MembersInjector.injectLoading(instance, singletonCImpl.provideLoadingFragmentProvider.get());
      return instance;
    }

    private BuySuccessFragment injectBuySuccessFragment2(BuySuccessFragment instance) {
      BuySuccessFragment_MembersInjector.injectAppContext(instance, singletonCImpl.provideApplicationContextProvider.get());
      BuySuccessFragment_MembersInjector.injectAppInfoAmount(instance, singletonCImpl.provideSharedPreferencesProvider.get());
      return instance;
    }

    private ChargeFragment injectChargeFragment2(ChargeFragment instance) {
      ChargeFragment_MembersInjector.injectAppContext(instance, singletonCImpl.provideApplicationContextProvider.get());
      ChargeFragment_MembersInjector.injectLoading(instance, singletonCImpl.provideLoadingFragmentProvider.get());
      return instance;
    }

    private ChargeSuccessFragment injectChargeSuccessFragment2(ChargeSuccessFragment instance) {
      ChargeSuccessFragment_MembersInjector.injectAppContext(instance, singletonCImpl.provideApplicationContextProvider.get());
      return instance;
    }

    private FailFragment injectFailFragment2(FailFragment instance) {
      FailFragment_MembersInjector.injectAppContext(instance, singletonCImpl.provideApplicationContextProvider.get());
      return instance;
    }

    private SwipeFragment injectSwipeFragment2(SwipeFragment instance) {
      SwipeFragment_MembersInjector.injectAppContext(instance, singletonCImpl.provideApplicationContextProvider.get());
      return instance;
    }

    private PasswordFragment injectPasswordFragment2(PasswordFragment instance) {
      PasswordFragment_MembersInjector.injectAppContext(instance, singletonCImpl.provideApplicationContextProvider.get());
      return instance;
    }

    private SettlementFragment injectSettlementFragment2(SettlementFragment instance) {
      SettlementFragment_MembersInjector.injectAppContext(instance, singletonCImpl.provideApplicationContextProvider.get());
      return instance;
    }

    private ConnectivityFragment injectConnectivityFragment2(ConnectivityFragment instance) {
      ConnectivityFragment_MembersInjector.injectAppContext(instance, singletonCImpl.provideApplicationContextProvider.get());
      return instance;
    }

    private FirstReciptAndSecondReciptFragment injectFirstReciptAndSecondReciptFragment2(
        FirstReciptAndSecondReciptFragment instance) {
      FirstReciptAndSecondReciptFragment_MembersInjector.injectSharedpref(instance, singletonCImpl.provideSharedPreferencesProvider.get());
      return instance;
    }

    private GetInfoFragment injectGetInfoFragment2(GetInfoFragment instance) {
      GetInfoFragment_MembersInjector.injectAppContext(instance, singletonCImpl.provideApplicationContextProvider.get());
      return instance;
    }

    private LogonFragment injectLogonFragment2(LogonFragment instance) {
      LogonFragment_MembersInjector.injectAppContext(instance, singletonCImpl.provideApplicationContextProvider.get());
      return instance;
    }

    private ManagementFragment injectManagementFragment2(ManagementFragment instance) {
      ManagementFragment_MembersInjector.injectAppContext(instance, singletonCImpl.provideApplicationContextProvider.get());
      return instance;
    }

    private ReciptPrintSettingFragment injectReciptPrintSettingFragment2(
        ReciptPrintSettingFragment instance) {
      ReciptPrintSettingFragment_MembersInjector.injectAppContext(instance, singletonCImpl.provideApplicationContextProvider.get());
      ReciptPrintSettingFragment_MembersInjector.injectSharedpref(instance, singletonCImpl.provideSharedPreferencesProvider.get());
      return instance;
    }

    private PrintReceiptFragment injectPrintReceiptFragment2(PrintReceiptFragment instance) {
      PrintReceiptFragment_MembersInjector.injectLoading(instance, singletonCImpl.provideLoadingFragmentProvider.get());
      PrintReceiptFragment_MembersInjector.injectAppContext(instance, singletonCImpl.provideApplicationContextProvider.get());
      return instance;
    }

    private SearchTransactionFragment injectSearchTransactionFragment2(
        SearchTransactionFragment instance) {
      SearchTransactionFragment_MembersInjector.injectAppContext(instance, singletonCImpl.provideApplicationContextProvider.get());
      return instance;
    }

    private ShowReceiptFragment injectShowReceiptFragment2(ShowReceiptFragment instance) {
      ShowReceiptFragment_MembersInjector.injectLoading(instance, singletonCImpl.provideLoadingFragmentProvider.get());
      ShowReceiptFragment_MembersInjector.injectAppContext(instance, singletonCImpl.provideApplicationContextProvider.get());
      return instance;
    }

    private TotalReportFragment injectTotalReportFragment2(TotalReportFragment instance) {
      TotalReportFragment_MembersInjector.injectLoading(instance, singletonCImpl.provideLoadingFragmentProvider.get());
      TotalReportFragment_MembersInjector.injectAppContext(instance, singletonCImpl.provideApplicationContextProvider.get());
      return instance;
    }

    private TransactionListFragment injectTransactionListFragment2(
        TransactionListFragment instance) {
      TransactionListFragment_MembersInjector.injectLoading(instance, singletonCImpl.provideLoadingFragmentProvider.get());
      TransactionListFragment_MembersInjector.injectAppContext(instance, singletonCImpl.provideApplicationContextProvider.get());
      return instance;
    }
  }

  private static final class ViewCImpl extends App_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends App_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
      injectMainActivity2(mainActivity);
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return Collections.<String>singleton(TmsViewModel_HiltModules_KeyModule_ProvideFactory.provide());
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    private MainActivity injectMainActivity2(MainActivity instance) {
      MainActivity_MembersInjector.injectAppContext(instance, singletonCImpl.provideApplicationContextProvider.get());
      return instance;
    }
  }

  private static final class ViewModelCImpl extends App_HiltComponents.ViewModelC {
    private final ViewModelModule viewModelModule;

    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<TmsRepository> provideTmsRepositoryProvider;

    private Provider<TmsViewModel> tmsViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ViewModelModule viewModelModuleParam,
        SavedStateHandle savedStateHandleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.viewModelModule = viewModelModuleParam;
      initialize(viewModelModuleParam, savedStateHandleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final ViewModelModule viewModelModuleParam,
        final SavedStateHandle savedStateHandleParam) {
      this.provideTmsRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<TmsRepository>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1));
      this.tmsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return Collections.<String, Provider<ViewModel>>singletonMap("com.fanap.corepos.tms.viewmodel.TmsViewModel", ((Provider) tmsViewModelProvider));
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.fanap.corepos.tms.viewmodel.TmsViewModel 
          return (T) new TmsViewModel(viewModelCImpl.provideTmsRepositoryProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule));

          case 1: // com.fanap.corepos.tms.repository.TmsRepository 
          return (T) ViewModelModule_ProvideTmsRepositoryFactory.provideTmsRepository(viewModelCImpl.viewModelModule);

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends App_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends App_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends App_HiltComponents.SingletonC {
    private final ApplicationContextModule applicationContextModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<Context> provideApplicationContextProvider;

    private Provider<LoadingFragment> provideLoadingFragmentProvider;

    private Provider<SharedPreferences> provideSharedPreferencesProvider;

    private SingletonCImpl(ApplicationContextModule applicationContextModuleParam) {
      this.applicationContextModule = applicationContextModuleParam;
      initialize(applicationContextModuleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicationContextModule applicationContextModuleParam) {
      this.provideApplicationContextProvider = DoubleCheck.provider(new SwitchingProvider<Context>(singletonCImpl, 0));
      this.provideLoadingFragmentProvider = DoubleCheck.provider(new SwitchingProvider<LoadingFragment>(singletonCImpl, 1));
      this.provideSharedPreferencesProvider = DoubleCheck.provider(new SwitchingProvider<SharedPreferences>(singletonCImpl, 2));
    }

    @Override
    public void injectApp(App app) {
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return Collections.<Boolean>emptySet();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // android.content.Context 
          return (T) AppModule_ProvideApplicationContextFactory.provideApplicationContext(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 1: // com.masa.aryan.main.view.LoadingFragment 
          return (T) AppModule_ProvideLoadingFragmentFactory.provideLoadingFragment();

          case 2: // android.content.SharedPreferences 
          return (T) AppModule_ProvideSharedPreferencesFactory.provideSharedPreferences(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
