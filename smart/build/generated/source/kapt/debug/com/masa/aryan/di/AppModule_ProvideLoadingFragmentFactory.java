// Generated by Dagger (https://dagger.dev).
package com.masa.aryan.di;

import com.masa.aryan.main.view.LoadingFragment;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideLoadingFragmentFactory implements Factory<LoadingFragment> {
  @Override
  public LoadingFragment get() {
    return provideLoadingFragment();
  }

  public static AppModule_ProvideLoadingFragmentFactory create() {
    return InstanceHolder.INSTANCE;
  }

  public static LoadingFragment provideLoadingFragment() {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideLoadingFragment());
  }

  private static final class InstanceHolder {
    private static final AppModule_ProvideLoadingFragmentFactory INSTANCE = new AppModule_ProvideLoadingFragmentFactory();
  }
}
